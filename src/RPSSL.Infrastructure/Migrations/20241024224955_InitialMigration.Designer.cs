// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPSSL.Infrastructure.Data;

#nullable disable

namespace RPSSL.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241024224955_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RPSSL.Domain.GameFlow.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameType")
                        .HasColumnType("int");

                    b.Property<Guid?>("PlayerOneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerTwoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.ToTable("GameSessions", "Game");
                });

            modelBuilder.Entity("RPSSL.Domain.Players.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Players", "Identity");
                });

            modelBuilder.Entity("RPSSL.Domain.GameFlow.GameSession", b =>
                {
                    b.HasOne("RPSSL.Domain.Players.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerOneId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RPSSL.Domain.Players.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerTwoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsMany("RPSSL.Domain.GameFlow.GameRound", "Rounds", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("PlayedDate")
                                .HasColumnType("datetime2");

                            b1.Property<int>("PlayerOneChoice")
                                .HasColumnType("int");

                            b1.Property<int>("PlayerTwoChoice")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("GameSessionId");

                            b1.ToTable("GameRounds", "Game");

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
